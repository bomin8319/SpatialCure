####
###1. Store True values for X0, X1, Z0, Z1, Z2, P#
###2. Store proportion censored pre & post#
###3. Simmulate n of 1000, do this 1000 times#
###4. Estimate cox, weibull, store all relevant coefficient estimates (exponentiate p's where applicable)#
###5. For each value in 4, calculate CPs and RMSEs, store.#
###6. Estimate cure exp and zombie weibull-->store all relevant coefficient estimates (exponentiate p's where applicable).#
###7. For each value in 6, calculate CPs and RMSEs, store.#
#
###############
####Set Up#####
###############
#
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000
sample
sample(1:10, 10)
sample(1:5, 10)
sample(1:5, 10, replace = TRUE)
s <- sample(1:5, n, replace = TRUE)
s
a<- matrix(0, 5, 5)
a
a[2,3]=a[3,2] = 1
a[1,2]=a[2,1] = 1
a
a[5,3]=a[3,5] = 1
a
a[1,4]=a[4,1] = 1
a
rnorm
w <- vapply(1:5, function(i){rnorm(1, 0, 1/(1*rowSums(a)[i])), c(1)}
rnorm(1, 0, 1/(1*rowSums(a)[i]))
w <- vapply(1:5, function(i){rnorm(1, 0, 1/(1*rowSums(a)[i]))}, c(1))
2
w
1/(1*rowSums(a)[i])
i
i = 1
1/(1*rowSums(a)[i])
i = 2
1/(1*rowSums(a)[i])
i = 3
1/(1*rowSums(a)[i])
i = r
i = 4
1/(1*rowSums(a)[i])
winit = rnorm(5)
winit
winit = rnorm(5)
winti
winit
mean(winit[which(a[i,]==1)])
which(a[i,]==1)
i
winit[which(a[i,]==1)]
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1
winit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))
w
rm(list=ls())
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))
w
vinit = rnorm(5)
####
###1. Store True values for X0, X1, Z0, Z1, Z2, P#
###2. Store proportion censored pre & post#
###3. Simmulate n of 1000, do this 1000 times#
###4. Estimate cox, weibull, store all relevant coefficient estimates (exponentiate p's where applicable)#
###5. For each value in 4, calculate CPs and RMSEs, store.#
###6. Estimate cure exp and zombie weibull-->store all relevant coefficient estimates (exponentiate p's where applicable).#
###7. For each value in 6, calculate CPs and RMSEs, store.#
#
###############
####Set Up#####
###############
#
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
vinit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))#
v <- vapply(1:5, function(i){rnorm(1, mean(vinit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))
winit
w
v
####
###1. Store True values for X0, X1, Z0, Z1, Z2, P#
###2. Store proportion censored pre & post#
###3. Simmulate n of 1000, do this 1000 times#
###4. Estimate cox, weibull, store all relevant coefficient estimates (exponentiate p's where applicable)#
###5. For each value in 4, calculate CPs and RMSEs, store.#
###6. Estimate cure exp and zombie weibull-->store all relevant coefficient estimates (exponentiate p's where applicable).#
###7. For each value in 6, calculate CPs and RMSEs, store.#
#
###############
####Set Up#####
###############
#
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
vinit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))#
v <- vapply(1:5, function(i){rnorm(1, mean(vinit[which(a[i,]==1)]), 1/(1*rowSums(a)[i]))}, c(1))
w
v
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
vinit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))#
v <- vapply(1:5, function(i){rnorm(1, mean(vinit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))
w
v
dnorm
library(devtools)
document()
setwd('/Users/bomin8319/Desktop/SpatialCure/pkg/R')
document()
check()
install()
#Assign parameter values#
tru.est[i,1]<-1#
tru.est[i,2]<-3.5#
tru.est[i,3]<--2#
tru.est[i,4]<--2#
tru.est[i,5]<-3#
tru.est[i,6]<-1#
#
tru.est2[i,1]<-1   #lambda#
tru.est2[i,2:6]<-w#
tru.est2[i,7:11]<-v
i = 1
#Assign parameter values#
tru.est[i,1]<-1#
tru.est[i,2]<-3.5#
tru.est[i,3]<--2#
tru.est[i,4]<--2#
tru.est[i,5]<-3#
tru.est[i,6]<-1#
#
tru.est2[i,1]<-1   #lambda#
tru.est2[i,2:6]<-w#
tru.est2[i,7:11]<-v
tru.est2
W <- w[s]
W
V <- v[s]
V
rbind(W, V)
#Assign parameter values#
tru.est[i,1]<-1#
tru.est[i,2]<-3.5#
tru.est[i,3]<--2#
tru.est[i,4]<--2#
tru.est[i,5]<-3#
tru.est[i,6]<-1#
#
tru.est2[i,1]<-1   #lambda#
tru.est2[i,2:6]<-w#
tru.est2[i,7:11]<-v#
#
W <- w[s]#
V <- v[s]#
myrates <- exp(tru.est[i,1]+(tru.est[i,2]*x + W)) #
y <- rexp(n, rate = myrates) # generates the r.v.#
cen <- rexp(n, rate = 1 )#
ycen <- pmin(y, cen)#
di <- as.numeric(y <= cen)#
tru.est[i,7]<-table(di)[1]#
#create parameters for ZG#
phi<-1/(1+exp(-(tru.est[i,3]+tru.est[i,4]*z+tru.est[i,5]*x + V)))#
yzero<-matrix(0,n,1)#
error<--1*rlogis(n)#
flag<-error>qlogis(phi)#
yzero[flag]<-error[flag]#
flag<-yzero==0#
ycen[flag]<-ifelse(di[flag]==1,cen[flag],ycen[flag])#
di[flag]<-ifelse(di[flag]==1,yzero[flag],di[flag])#
tru.est[i,8]<-table(di)[1]#
data<-cbind(ycen,di,x,z, s, a, W, V)
i
####
###1. Store True values for X0, X1, Z0, Z1, Z2, P#
###2. Store proportion censored pre & post#
###3. Simmulate n of 1000, do this 1000 times#
###4. Estimate cox, weibull, store all relevant coefficient estimates (exponentiate p's where applicable)#
###5. For each value in 4, calculate CPs and RMSEs, store.#
###6. Estimate cure exp and zombie weibull-->store all relevant coefficient estimates (exponentiate p's where applicable).#
###7. For each value in 6, calculate CPs and RMSEs, store.#
#
###############
####Set Up#####
###############
#
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-1000#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
vinit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))#
v <- vapply(1:5, function(i){rnorm(1, mean(vinit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))#
#
#create a depen
i
w
v
i = 1
#Assign parameter values#
tru.est[i,1]<-1#
tru.est[i,2]<-3.5#
tru.est[i,3]<--2#
tru.est[i,4]<--2#
tru.est[i,5]<-3#
tru.est[i,6]<-1#
#
tru.est2[i,1]<-1   #lambda#
tru.est2[i,2:6]<-w#
tru.est2[i,7:11]<-v#
#
W <- w[s]#
V <- v[s]#
myrates <- exp(tru.est[i,1]+(tru.est[i,2]*x + W)) #
y <- rexp(n, rate = myrates) # generates the r.v.#
cen <- rexp(n, rate = 1 )#
ycen <- pmin(y, cen)#
di <- as.numeric(y <= cen)#
tru.est[i,7]<-table(di)[1]#
#create parameters for ZG#
phi<-1/(1+exp(-(tru.est[i,3]+tru.est[i,4]*z+tru.est[i,5]*x + V)))#
yzero<-matrix(0,n,1)#
error<--1*rlogis(n)#
flag<-error>qlogis(phi)#
yzero[flag]<-error[flag]#
flag<-yzero==0#
ycen[flag]<-ifelse(di[flag]==1,cen[flag],ycen[flag])#
di[flag]<-ifelse(di[flag]==1,yzero[flag],di[flag])#
tru.est[i,8]<-table(di)[1]#
data<-cbind(ycen,di,x,z, s)
dhead(data)
head(data)
library(SpatialCure)
###Simple Exponential Model##############################
##############################################################################
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Exponential <- mcmcSurv(Y, C, X, 1500, 500, 1, form = "Exponential")
Exponential <- mcmcSurv(Y, C, X, 330, 30, 1, form = "Exponential")
names(Exponential)
Exponential$betas
output.Exponential = summary(mcmc(Exponential))
output.Exponential = summary(mcmc(Exponential$betas))
names(Exponential)
Exponential$rho
library(MCMCpack)
output.Exponential = summary(mcmc(Exponential$betas))
output.Exponential
exp.est[i,1]<-output.Exponential[[1]][1,1]
output.Exponential[[1]][1,1]
exp.est[i,4]<-output.Exponential[[1]][2,4]
output.Exponential[[1]][2,4]
sqrt((tru.est[i,1]-exp.est[i,1])^2)
sqrt((tru.est[i,2]-exp.est[i,3])^2)
tru.est[i,2]
exp.est[i,3]
exp.est[i,1]<-output.Exponential[[1]][1,1]#
exp.est[i,2]<-output.Exponential[[1]][1,4]#
exp.est[i,3]<-output.Exponential[[1]][2,1]#
exp.est[i,4]<-output.Exponential[[1]][2,4]#
#
#store rmse#
exp.rmse[i,1]<-sqrt((tru.est[i,1]-exp.est[i,1])^2)#
exp.rmse[i,2]<-sqrt((tru.est[i,2]-exp.est[i,3])^2)
sqrt((tru.est[i,2]-exp.est[i,3])^2)
#calculate upper and lower 95% CI's#
b0.lower<-exp.est[i,1]-(1.959964*exp.est[i,2])#
b0.upper<-exp.est[i,1]+(1.959964*exp.est[i,2])#
b1.lower<-exp.est[i,3]-(1.959964*exp.est[i,4])#
b1.upper<-exp.est[i,3]+(1.959964*exp.est[i,4])
b0.lower
output.Exponential[[2]][2,5]
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Weibull <- mcmcSurv(Y, C, X, 330, 30, 1, form = "Weibull")
names(Weibull)
WeibulL$rho
Weibull$rho
output.Weibull = summary(mcmc(Weibull$betas))
output.Weibull2 = summary(mcmc(Weibull$rho))
output.Weibull
weib.est[i,1]<-output.Weibull[[1]][1,1]#
weib.est[i,2]<-output.Weibull[[1]][1,4]#
weib.est[i,3]<-output.Weibull[[1]][2,1]#
weib.est[i,4]<-output.Weibull[[1]][2,4]
weib.est
weib.est[1,]
weib.est[i,5]<--output.Weibull2[[1]][1,1]
output.Weibull2
weib.est[i,5]<-output.Weibull2[[1]][1]
output.Weibull2[[1]][1]
weib.est[i,6]<-output.Weibull2[[1]][4]
#store rmse#
weib.rmse[i,1]<-sqrt((tru.est[i,1]-weib.est[i,1])^2)#
weib.rmse[i,2]<-sqrt((tru.est[i,2]-weib.est[i,3])^2)#
weib.rmse[i,3]<-sqrt((tru.est[i,6]-weib.est[i,5])^2)
weib.rmse[1,]
CExponential <- mcmcCure(Y, C, X, Z, 330, 30, 1, form = "Exponential")
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Z<-cbind(1,z,x)#
#
CExponential <- mcmcCure(Y, C, X, Z, 330, 30, 1, form = "Exponential")
names(CExponential)
CExponential$beta
names(CExponential)
CExponential$rho
CExponential$gammas
exp.est[i,6]<-output.CExponential[[1]][1,4]
output.CExponential = summary(mcmc(CExponential$betas))
output.CExponential2 = summary(mcmc(CExponential$gammas))
output.CExponential
output.CExponential2[[1]][1,1]
output.CExponential2
#store betas and ses#
exp.est[i,5]<-output.CExponential[[1]][1,1]#
exp.est[i,6]<-output.CExponential[[1]][1,4]#
exp.est[i,7]<-output.CExponential[[1]][2,1]#
exp.est[i,8]<-output.CExponential[[1]][2,4]#
exp.est[i,9]<-output.CExponential2[[1]][1,1]#
exp.est[i,10]<-output.CExponential2[[1]][1,4]#
exp.est[i,11]<-output.CExponential2[[1]][2,1]]#
exp.est[i,12]<-output.CExponential2[[1]][2,4]#
exp.est[i,13]<-output.CExponential2[[1]][3,1]#
exp.est[i,14]<-output.CExponential2[[1]][3,4]#
#
#store rmse#
exp.rmse[i,3]<-sqrt((tru.est[i,3]-exp.est[i,5])^2)#
exp.rmse[i,4]<-sqrt((tru.est[i,4]-exp.est[i,7])^2)#
exp.rmse[i,5]<-sqrt((tru.est[i,5]-exp.est[i,9])^2)#
exp.rmse[i,6]<-sqrt((tru.est[i,1]-exp.est[i,11])^2)#
exp.rmse[i,7]<-sqrt((tru.est[i,2]-exp.est[i,13])^2)
output.Exponential2[[2]][1,1]
output.CExponential2[[2]][1,1]
CWeibull <- mcmcCure(Y, C, X, Z, 330, 30, 1, form = "Weibull")#
output.CWeibull = summary(mcmc(CWeibull$betas))#
output.CWeibull2 = summary(mcmc(CWeibull$gammas))
output.CWeibull3 = summary(mcmc(CWeibull$rho))
output.CWeibull
output.CWeibull2
output.CWeibull3
output.CWeibull[[1]][1,1]
output.CWeibull[[1]][1,4]
output.CWeibull[[1]][3,1]
output.CWeibull3[[1]][1]
#store betas and ses#
weib.est[i,7]<-output.CWeibull[[1]][1,1]#
weib.est[i,8]<-output.CWeibull[[1]][1,4]#
weib.est[i,9]<-output.CWeibull[[1]][2,1]#
weib.est[i,10]<-output.CWeibull[[1]][2,4]#
weib.est[i,11]<-output.CWeibull2[[1]][1,1]#
weib.est[i,12]<-output.CWeibull2[[1]][1,4]#
weib.est[i,13]<-output.CWeibull2[[1]][2,1]#
weib.est[i,14]<-output.CWeibull2[[1]][2,4]#
weib.est[i,15]<-output.CWeibull2[[1]][3,1]#
weib.est[i,16]<-output.CWeibull2[[1]][3,4]#
weib.est[i,17]<-output.CWeibull3[[1]][1]#
weib.est[i,18]<-output.CWeibull3[[1]][4]
weib.rmse[i,4]<-sqrt((tru.est[i,3]-weib.est[i,7])^2)#
weib.rmse[i,5]<-sqrt((tru.est[i,4]-weib.est[i,9])^2)#
weib.rmse[i,6]<-sqrt((tru.est[i,5]-weib.est[i,11])^2)#
weib.rmse[i,7]<-sqrt((tru.est[i,1]-weib.est[i,13])^2)#
weib.rmse[i,8]<-sqrt((tru.est[i,2]-weib.est[i,15])^2)#
weib.rmse[i,9]<-sqrt((tru.est[i,6]-weib.est[i,17])^2)
weib.rmse
weib.rmse[1,]
tru.est[1,]
output.CWeibull[[1]][1,1]
output.CWeibull[[1]][1,4]
tru.est[i,3]
weib.est[i,7]
#store rmse#
weib.rmse[i,4]<-sqrt((tru.est[i,1]-weib.est[i,7])^2)#
weib.rmse[i,5]<-sqrt((tru.est[i,2]-weib.est[i,9])^2)#
weib.rmse[i,6]<-sqrt((tru.est[i,3]-weib.est[i,11])^2)#
weib.rmse[i,7]<-sqrt((tru.est[i,4]-weib.est[i,13])^2)#
weib.rmse[i,8]<-sqrt((tru.est[i,5]-weib.est[i,15])^2)#
weib.rmse[i,9]<-sqrt((tru.est[i,6]-weib.est[i,17])^2)
weib.rmse[1,]
#store rmse#
exp.rmse[i,3]<-sqrt((tru.est[i,1]-exp.est[i,5])^2)#
exp.rmse[i,4]<-sqrt((tru.est[i,2]-exp.est[i,7])^2)#
exp.rmse[i,5]<-sqrt((tru.est[i,3]-exp.est[i,9])^2)#
exp.rmse[i,6]<-sqrt((tru.est[i,4]-exp.est[i,11])^2)#
exp.rmse[i,7]<-sqrt((tru.est[i,5]-exp.est[i,13])^2)
exp.rmse[1,]
exp.est[i,5]<-output.CExponential[[1]][1,1]#
exp.est[i,6]<-output.CExponential[[1]][1,4]#
exp.est[i,7]<-output.CExponential[[1]][2,1]#
exp.est[i,8]<-output.CExponential[[1]][2,4]#
exp.est[i,9]<-output.CExponential2[[1]][1,1]#
exp.est[i,10]<-output.CExponential2[[1]][1,4]#
exp.est[i,11]<-output.CExponential2[[1]][2,1]]#
exp.est[i,12]<-output.CExponential2[[1]][2,4]#
exp.est[i,13]<-output.CExponential2[[1]][3,1]#
exp.est[i,14]<-output.CExponential2[[1]][3,4]#
#
#store rmse#
exp.rmse[i,3]<-sqrt((tru.est[i,1]-exp.est[i,5])^2)#
exp.rmse[i,4]<-sqrt((tru.est[i,2]-exp.est[i,7])^2)#
exp.rmse[i,5]<-sqrt((tru.est[i,3]-exp.est[i,9])^2)#
exp.rmse[i,6]<-sqrt((tru.est[i,4]-exp.est[i,11])^2)#
exp.rmse[i,7]<-sqrt((tru.est[i,5]-exp.est[i,13])^2)
exp.rmse[1,]
tru.est[i,3]
exp.est[i,9]
exp.rmse[i,5]<-sqrt((tru.est[i,3]-exp.est[i,9])^2)
exp.est[i,9]
exp.rmse[1,]
tru.est[i,4]
exp.est[i,11]
#store betas and ses#
exp.est[i,5]<-output.CExponential[[1]][1,1]#
exp.est[i,6]<-output.CExponential[[1]][1,4]#
exp.est[i,7]<-output.CExponential[[1]][2,1]#
exp.est[i,8]<-output.CExponential[[1]][2,4]#
exp.est[i,9]<-output.CExponential2[[1]][1,1]#
exp.est[i,10]<-output.CExponential2[[1]][1,4]#
exp.est[i,11]<-output.CExponential2[[1]][2,1]#
exp.est[i,12]<-output.CExponential2[[1]][2,4]#
exp.est[i,13]<-output.CExponential2[[1]][3,1]#
exp.est[i,14]<-output.CExponential2[[1]][3,4]#
#
#store rmse#
exp.rmse[i,3]<-sqrt((tru.est[i,1]-exp.est[i,5])^2)#
exp.rmse[i,4]<-sqrt((tru.est[i,2]-exp.est[i,7])^2)#
exp.rmse[i,5]<-sqrt((tru.est[i,3]-exp.est[i,9])^2)#
exp.rmse[i,6]<-sqrt((tru.est[i,4]-exp.est[i,11])^2)#
exp.rmse[i,7]<-sqrt((tru.est[i,5]-exp.est[i,13])^2)
exp.rmse[1,]
#clear memory#
rm( list=ls() )#
#
#load necessary libraries 						                                 #
library(foreign)#
library(car)#
library(MASS)#
library(VGAM)#
library(survival)#
library(msm)#
library(verification)#
library(corpcor)#
library(Design)#
library(SpatialCure)#
library(MCMCpack)#
#set working directory#
setwd("/Users/bomin8319/Desktop/SpatialCureSurv/simulation")#
#
###########################################################################
###########################################################################
############################Monte Carlo####################################
###########################################################################
#
#set seed#
set.seed(3)   #
#
#set the number of observations#
n<-1000#
#
#set the number of simulations, and create matrices to store the results#
nsims<-10#
#
#history matrix for true estimates#
tru.est<-matrix(NA,nrow=nsims,ncol=8)#
#history matrix for true Spatial estimates#
tru.est2<-matrix(NA,nrow=nsims,ncol=11)#
#history matrix for cox estimates#
cox.est<-matrix(NA,nrow=nsims,ncol=2)#
#history matrix for exp estimates#
exp.est<-matrix(NA,nrow=nsims,ncol=14)#
#history matrix for weibull estimates#
weib.est<-matrix(NA,nrow=nsims,ncol=18)#
#history matrix for cox RMSE#
cox.rmse<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp RMSE#
exp.rmse<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp RMSE#
weib.rmse<-matrix(NA,nrow=nsims,ncol=9)#
#history matrix for cox CP#
cox.cp<-matrix(NA,nrow=nsims,ncol=1)#
#history matrix for exp CP#
exp.cp<-matrix(NA,nrow=nsims,ncol=7)#
#history matrix for exp CP#
weib.cp<-matrix(NA,nrow=nsims,ncol=9)#
#
#create covariates#
x<-runif(n, min=-2.5, max=12)#
z<-log(runif(n, min=1, max=100))#
s<- sample(1:5, n, replace = TRUE)#
a<- matrix(0, 5, 5)#
a[1,2]=a[2,1] = 1#
a[2,3]=a[3,2] = 1 #
a[5,3]=a[3,5] = 1 #
a[1,4]=a[4,1] = 1 #
winit = rnorm(5)#
vinit = rnorm(5)#
w <- vapply(1:5, function(i){rnorm(1, mean(winit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))#
v <- vapply(1:5, function(i){rnorm(1, mean(vinit[which(a[i,]==1)]), sqrt(1/(1*rowSums(a)[i])))}, c(1))#
#
#create a dependent variable, begin the simmulations#
for(i in 1:nsims){#
#
#Assign parameter values#
tru.est[i,1]<-1#
tru.est[i,2]<-3.5#
tru.est[i,3]<--2#
tru.est[i,4]<--2#
tru.est[i,5]<-3#
tru.est[i,6]<-1#
#
tru.est2[i,1]<-1   #lambda#
tru.est2[i,2:6]<-w#
tru.est2[i,7:11]<-v#
#
W <- w[s]#
V <- v[s]#
myrates <- exp(tru.est[i,1]+(tru.est[i,2]*x + W)) #
y <- rexp(n, rate = myrates) # generates the r.v.#
cen <- rexp(n, rate = 1 )#
ycen <- pmin(y, cen)#
di <- as.numeric(y <= cen)#
tru.est[i,7]<-table(di)[1]#
#create parameters for ZG#
phi<-1/(1+exp(-(tru.est[i,3]+tru.est[i,4]*z+tru.est[i,5]*x + V)))#
yzero<-matrix(0,n,1)#
error<--1*rlogis(n)#
flag<-error>qlogis(phi)#
yzero[flag]<-error[flag]#
flag<-yzero==0#
ycen[flag]<-ifelse(di[flag]==1,cen[flag],ycen[flag])#
di[flag]<-ifelse(di[flag]==1,yzero[flag],di[flag])#
tru.est[i,8]<-table(di)[1]#
data<-cbind(ycen,di,x,z, s)#
##############################################################################
########################Simple Exponential Model##############################
##############################################################################
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Exponential <- mcmcSurv(Y, C, X, 330, 30, 1, form = "Exponential")#
output.Exponential = summary(mcmc(Exponential$betas))#
#
#store betas and ses#
exp.est[i,1]<-output.Exponential[[1]][1,1]#
exp.est[i,2]<-output.Exponential[[1]][1,4]#
exp.est[i,3]<-output.Exponential[[1]][2,1]#
exp.est[i,4]<-output.Exponential[[1]][2,4]#
#
#store rmse#
exp.rmse[i,1]<-sqrt((tru.est[i,1]-exp.est[i,1])^2)#
exp.rmse[i,2]<-sqrt((tru.est[i,2]-exp.est[i,3])^2)#
#
#calculate upper and lower 95% CI's#
b0.lower<-output.Exponential[[2]][1,1]#
b0.upper<-output.Exponential[[2]][1,5]#
b1.lower<-output.Exponential[[2]][2,1]#
b1.upper<-output.Exponential[[2]][2,5]#
#store coverage parameters#
exp.cp[i,1]<-ifelse(tru.est[i,1]>b0.lower & tru.est[i,1]<b0.upper, 1,0)#
exp.cp[i,2]<-ifelse(tru.est[i,2]>b1.lower & tru.est[i,2]<b1.upper, 1,0)#
#################################################################################
#########################Simple Weibull Model ###################################
#################################################################################
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Weibull <- mcmcSurv(Y, C, X, 330, 30, 1, form = "Weibull")#
output.Weibull = summary(mcmc(Weibull$betas))#
output.Weibull2 = summary(mcmc(Weibull$rho))#
#
#store betas and ses#
weib.est[i,1]<-output.Weibull[[1]][1,1]#
weib.est[i,2]<-output.Weibull[[1]][1,4]#
weib.est[i,3]<-output.Weibull[[1]][2,1]#
weib.est[i,4]<-output.Weibull[[1]][2,4]#
weib.est[i,5]<-output.Weibull2[[1]][1]#
weib.est[i,6]<-output.Weibull2[[1]][4]#
#
#store rmse#
weib.rmse[i,1]<-sqrt((tru.est[i,1]-weib.est[i,1])^2)#
weib.rmse[i,2]<-sqrt((tru.est[i,2]-weib.est[i,3])^2)#
weib.rmse[i,3]<-sqrt((tru.est[i,6]-weib.est[i,5])^2)#
#
#calculate upper and lower 95% CI's#
b0.lower<-output.Weibull[[2]][1,1]#
b0.upper<-output.Weibull[[2]][1,5]#
b1.lower<-output.Weibull[[2]][2,1]#
b1.upper<-output.Weibull[[2]][2,5]#
p.lower<-output.Weibull2[[2]][1]#
p.upper<-output.Weibull2[[2]][5]#
#
#store coverage parameters#
weib.cp[i,1]<-ifelse(tru.est[i,1]>b0.lower & tru.est[i,1]<b0.upper, 1,0)#
weib.cp[i,2]<-ifelse(tru.est[i,2]>b1.lower & tru.est[i,2]<b1.upper, 1,0)#
weib.cp[i,3]<-ifelse(tru.est[i,6]>p.lower & tru.est[i,6]<p.upper, 1,0)#
#
################################################################################
############################Cure Exponential Model##############################
################################################################################
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Z<-cbind(1,z,x)#
#
CExponential <- mcmcCure(Y, C, X, Z, 330, 30, 1, form = "Exponential")#
output.CExponential = summary(mcmc(CExponential$betas))#
output.CExponential2 = summary(mcmc(CExponential$gammas))#
#
#store betas and ses#
exp.est[i,5]<-output.CExponential[[1]][1,1]#
exp.est[i,6]<-output.CExponential[[1]][1,4]#
exp.est[i,7]<-output.CExponential[[1]][2,1]#
exp.est[i,8]<-output.CExponential[[1]][2,4]#
exp.est[i,9]<-output.CExponential2[[1]][1,1]#
exp.est[i,10]<-output.CExponential2[[1]][1,4]#
exp.est[i,11]<-output.CExponential2[[1]][2,1]#
exp.est[i,12]<-output.CExponential2[[1]][2,4]#
exp.est[i,13]<-output.CExponential2[[1]][3,1]#
exp.est[i,14]<-output.CExponential2[[1]][3,4]#
#
#store rmse#
exp.rmse[i,3]<-sqrt((tru.est[i,1]-exp.est[i,5])^2)#
exp.rmse[i,4]<-sqrt((tru.est[i,2]-exp.est[i,7])^2)#
exp.rmse[i,5]<-sqrt((tru.est[i,3]-exp.est[i,9])^2)#
exp.rmse[i,6]<-sqrt((tru.est[i,4]-exp.est[i,11])^2)#
exp.rmse[i,7]<-sqrt((tru.est[i,5]-exp.est[i,13])^2)#
#
#calculate upper and lower 95% CI's#
g0.lower<-output.CExponential2[[2]][1,1]#
g0.upper<-output.CExponential2[[2]][1,5]#
g1.lower<-output.CExponential2[[2]][2,1]#
g1.upper<-output.CExponential2[[2]][2,5]#
g2.lower<-output.CExponential2[[2]][3,1]#
g2.upper<-output.CExponential2[[2]][3,5]#
b0.lower<-output.CExponential[[2]][1,1]#
b0.upper<-output.CExponential[[2]][1,5]#
b1.lower<-output.CExponential[[2]][2,1]#
b1.upper<-output.CExponential[[2]][2,5]#
#
#store coverage parameters#
exp.cp[i,3]<-ifelse(tru.est[i,3]>g0.lower & tru.est[i,3]<g0.upper, 1,0)#
exp.cp[i,4]<-ifelse(tru.est[i,4]>g1.lower & tru.est[i,4]<g1.upper, 1,0)#
exp.cp[i,5]<-ifelse(tru.est[i,5]>g2.lower & tru.est[i,5]<g2.upper, 1,0)#
exp.cp[i,6]<-ifelse(tru.est[i,1]>b0.lower & tru.est[i,1]<b0.upper, 1,0)#
exp.cp[i,7]<-ifelse(tru.est[i,2]>b1.lower & tru.est[i,2]<b1.upper, 1,0)#
######################################################################################
############################Cure Weibull Model #######################################
######################################################################################
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Z<-cbind(1,z,x)#
#
CWeibull <- mcmcCure(Y, C, X, Z, 330, 30, 1, form = "Weibull")#
output.CWeibull = summary(mcmc(CWeibull$betas))#
output.CWeibull2 = summary(mcmc(CWeibull$gammas))#
output.CWeibull3 = summary(mcmc(CWeibull$rho))#
#
#store betas and ses#
weib.est[i,7]<-output.CWeibull[[1]][1,1]#
weib.est[i,8]<-output.CWeibull[[1]][1,4]#
weib.est[i,9]<-output.CWeibull[[1]][2,1]#
weib.est[i,10]<-output.CWeibull[[1]][2,4]#
weib.est[i,11]<-output.CWeibull2[[1]][1,1]#
weib.est[i,12]<-output.CWeibull2[[1]][1,4]#
weib.est[i,13]<-output.CWeibull2[[1]][2,1]#
weib.est[i,14]<-output.CWeibull2[[1]][2,4]#
weib.est[i,15]<-output.CWeibull2[[1]][3,1]#
weib.est[i,16]<-output.CWeibull2[[1]][3,4]#
weib.est[i,17]<-output.CWeibull3[[1]][1]#
weib.est[i,18]<-output.CWeibull3[[1]][4]#
#store rmse#
weib.rmse[i,4]<-sqrt((tru.est[i,1]-weib.est[i,7])^2)#
weib.rmse[i,5]<-sqrt((tru.est[i,2]-weib.est[i,9])^2)#
weib.rmse[i,6]<-sqrt((tru.est[i,3]-weib.est[i,11])^2)#
weib.rmse[i,7]<-sqrt((tru.est[i,4]-weib.est[i,13])^2)#
weib.rmse[i,8]<-sqrt((tru.est[i,5]-weib.est[i,15])^2)#
weib.rmse[i,9]<-sqrt((tru.est[i,6]-weib.est[i,17])^2)#
#
#calculate upper and lower 95% CI's#
g0.lower<-output.CWeibull2[[2]][1,1]#
g0.upper<-output.CWeibull2[[2]][1,5]#
g1.lower<-output.CWeibull2[[2]][2,1]#
g1.upper<-output.CWeibull2[[2]][2,5]#
g2.lower<-output.CWeibull2[[2]][3,1]#
g2.upper<-output.CWeibull2[[2]][3,5]#
b0.lower<-output.CWeibull[[2]][1,1]#
b0.upper<-output.CWeibull[[2]][1,5]#
b1.lower<-output.CWeibull[[2]][2,1]#
b1.upper<-output.CWeibull[[2]][2,5]#
p.lower<-output.CWeibull3[[2]][1]#
p.upper<-output.CWeibull3[[2]][5]#
#
#store coverage parameters#
weib.cp[i,4]<-ifelse(tru.est[i,3]>g0.lower & tru.est[i,3]<g0.upper, 1,0)#
weib.cp[i,5]<-ifelse(tru.est[i,4]>g1.lower & tru.est[i,4]<g1.upper, 1,0)#
weib.cp[i,6]<-ifelse(tru.est[i,5]>g2.lower & tru.est[i,5]<g2.upper, 1,0)#
weib.cp[i,7]<-ifelse(tru.est[i,1]>b0.lower & tru.est[i,1]<b0.upper, 1,0)#
weib.cp[i,8]<-ifelse(tru.est[i,2]>b1.lower & tru.est[i,2]<b1.upper, 1,0)#
weib.cp[i,9]<-ifelse(tru.est[i,6]>p.lower & tru.est[i,6]<p.upper, 1,0)#
}
main.data<-cbind(tru.est,cox.est,exp.est,weib.est,cox.rmse,exp.rmse,weib.rmse,cox.cp,exp.cp,weib.cp)#
colnames(main.data)<-c("true.x0","true.x1","true.z0","true.z1","true.z2","true.p","cen.lat","cen.obs","cox.x1","cox.x1.se","exp.x0","exp.x0.se","exp.x1","exp.x1.se",#
	"cexp.z0","cexp.z0.se","cexp.z1","cexp.z1.se","cexp.z2","cexp.z2.se","cexp.x0","cexp.x0.se","cexp.x1","cexp.x1.se","wei.x0","wei.x0.se","wei.x1","wei.x1.se","wei.p","wei.p.se",#
	"cwei.z0","cwei.z0.se","cwei.z1","cwei.z1.se","cwei.z2","cwei.z2.se","cwei.x0","cwei.x0.se","cwei.x1","cwei.x1.se","cwei.p","cwei.p.se","cox.x1.rmse",#
	"exp.x0.rmse","exp.x1.rmse","cexp.x0.rmse","cexp.x1.rmse","cexp.z0.rmse","cexp.z1.rmse","cexp.z2.rmse","wei.x0.rmse","wei.x1.rmse","wei.p.rmse","cwei.x0.rmse","cwei.x1.rmse","cwei.z0.rmse",#
	"cwei.z1.rmse","cwei.z2.rmse","cwei.p.rmse","cox.x1.cp","exp.x0.cp","exp.x1.cp","cexp.z0.cp","cexp.z1.cp","cexp.z2.cp","cexp.x0.cp","cexp.x1.cp","wei.x0.cp","wei.x1.cp","wei.p.cp",#
	"cwei.z0.cp","cwei.z1.cp","cwei.z2.cp","cwei.x0.cp","cwei.x1.cp","cwei.p.cp")#
#
#save dataset#
main.data<-as.data.frame(main.data)
colMeans(main.data)
#combine matrices and label variables#
main.data<-cbind(tru.est,exp.est,weib.est,cox.rmse,exp.rmse,weib.rmse,exp.cp,weib.cp)#
colnames(main.data)<-c("true.x0","true.x1","true.z0","true.z1","true.z2","true.p","cen.lat","cen.obs","exp.x0","exp.x0.se","exp.x1","exp.x1.se",#
	"cexp.z0","cexp.z0.se","cexp.z1","cexp.z1.se","cexp.z2","cexp.z2.se","cexp.x0","cexp.x0.se","cexp.x1","cexp.x1.se","wei.x0","wei.x0.se","wei.x1","wei.x1.se","wei.p","wei.p.se",#
	"cwei.z0","cwei.z0.se","cwei.z1","cwei.z1.se","cwei.z2","cwei.z2.se","cwei.x0","cwei.x0.se","cwei.x1","cwei.x1.se","cwei.p","cwei.p.se",#
	"exp.x0.rmse","exp.x1.rmse","cexp.x0.rmse","cexp.x1.rmse","cexp.z0.rmse","cexp.z1.rmse","cexp.z2.rmse","wei.x0.rmse","wei.x1.rmse","wei.p.rmse","cwei.x0.rmse","cwei.x1.rmse","cwei.z0.rmse",#
	"cwei.z1.rmse","cwei.z2.rmse","cwei.p.rmse","exp.x0.cp","exp.x1.cp","cexp.z0.cp","cexp.z1.cp","cexp.z2.cp","cexp.x0.cp","cexp.x1.cp","wei.x0.cp","wei.x1.cp","wei.p.cp",#
	"cwei.z0.cp","cwei.z1.cp","cwei.z2.cp","cwei.x0.cp","cwei.x1.cp","cwei.p.cp")
main.data<-cbind(tru.est,exp.est,weib.est,exp.rmse,weib.rmse,exp.cp,weib.cp)#
colnames(main.data)<-c("true.x0","true.x1","true.z0","true.z1","true.z2","true.p","cen.lat","cen.obs","exp.x0","exp.x0.se","exp.x1","exp.x1.se",#
	"cexp.z0","cexp.z0.se","cexp.z1","cexp.z1.se","cexp.z2","cexp.z2.se","cexp.x0","cexp.x0.se","cexp.x1","cexp.x1.se","wei.x0","wei.x0.se","wei.x1","wei.x1.se","wei.p","wei.p.se",#
	"cwei.z0","cwei.z0.se","cwei.z1","cwei.z1.se","cwei.z2","cwei.z2.se","cwei.x0","cwei.x0.se","cwei.x1","cwei.x1.se","cwei.p","cwei.p.se",#
	"exp.x0.rmse","exp.x1.rmse","cexp.x0.rmse","cexp.x1.rmse","cexp.z0.rmse","cexp.z1.rmse","cexp.z2.rmse","wei.x0.rmse","wei.x1.rmse","wei.p.rmse","cwei.x0.rmse","cwei.x1.rmse","cwei.z0.rmse",#
	"cwei.z1.rmse","cwei.z2.rmse","cwei.p.rmse","exp.x0.cp","exp.x1.cp","cexp.z0.cp","cexp.z1.cp","cexp.z2.cp","cexp.x0.cp","cexp.x1.cp","wei.x0.cp","wei.x1.cp","wei.p.cp",#
	"cwei.z0.cp","cwei.z1.cp","cwei.z2.cp","cwei.x0.cp","cwei.x1.cp","cwei.p.cp")
colMeans(main.data)
main.data<-cbind(tru.est,exp.est,weib.est,exp.rmse,weib.rmse,exp.cp,weib.cp)#
colnames(main.data)<-c("true.x0","true.x1","true.z0","true.z1","true.z2","true.p","cen.lat","cen.obs","exp.x0","exp.x0.se","exp.x1","exp.x1.se",#
	"cexp.x0","cexp.x0.se","cexp.x1","cexp.x1.se","cexp.z0","cexp.z0.se","cexp.z1","cexp.z1.se","cexp.z2","cexp.z2.se","wei.x0","wei.x0.se","wei.x1","wei.x1.se","wei.p","wei.p.se",#
	"cwei.x0","cwei.x0.se","cwei.x1","cwei.x1.se","cwei.z0","cwei.z0.se","cwei.z1","cwei.z1.se","cwei.z2","cwei.z2.se","cwei.p","cwei.p.se",#
	"exp.x0.rmse","exp.x1.rmse","cexp.x0.rmse","cexp.x1.rmse","cexp.z0.rmse","cexp.z1.rmse","cexp.z2.rmse","wei.x0.rmse","wei.x1.rmse","wei.p.rmse","cwei.x0.rmse","cwei.x1.rmse","cwei.z0.rmse",#
	"cwei.z1.rmse","cwei.z2.rmse","cwei.p.rmse","exp.x0.cp","exp.x1.cp","cexp.z0.cp","cexp.z1.cp","cexp.z2.cp","cexp.x0.cp","cexp.x1.cp","wei.x0.cp","wei.x1.cp","wei.p.cp",#
	"cwei.z0.cp","cwei.z1.cp","cwei.z2.cp","cwei.x0.cp","cwei.x1.cp","cwei.p.cp")
colMeans(main.data)
Y<-ycen#
C<-di#
X<-cbind(1,x)#
Z<-cbind(1,z,x)#
S<-s#
A<-a#
#
CExponential <- mcmcCure(Y, C, X, Z, S, A, 330, 30, 1, form = "Exponential")
a
mcmcSpatialCure
mcmcSpatialCure
